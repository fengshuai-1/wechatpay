<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\gd32.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\gd32.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Apr 28 20:58:37 2021
<BR><P>
<H3>Maximum Stack Usage =        468 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; functionSelect &rArr; unlockByPasswd &rArr;  unlockByPasswd (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[31]">ADC0_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31]">ADC0_1_IRQHandler</a><BR>
 <LI><a href="#[14f]">unlockByPasswd</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14f]">unlockByPasswd</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[31]">ADC0_1_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[19]">BusFault_Handler</a> from gd32e10x_it.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[35]">CAN0_EWMC_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[33]">CAN0_RX0_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[34]">CAN0_RX1_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[32]">CAN0_TX_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[5d]">CAN1_EWMC_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[5b]">CAN1_RX0_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[5c]">CAN1_RX1_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[5a]">CAN1_TX_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[2a]">DMA0_Channel0_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[2b]">DMA0_Channel1_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[2c]">DMA0_Channel2_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[2d]">DMA0_Channel3_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[2e]">DMA0_Channel4_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[2f]">DMA0_Channel5_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[30]">DMA0_Channel6_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[55]">DMA1_Channel0_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[56]">DMA1_Channel1_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[57]">DMA1_Channel2_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[58]">DMA1_Channel3_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[59]">DMA1_Channel4_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[1c]">DebugMon_Handler</a> from gd32e10x_it.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[4e]">EXMC_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[25]">EXTI0_IRQHandler</a> from bsp_gpio.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[47]">EXTI10_15_IRQHandler</a> from bsp_gpio.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[26]">EXTI1_IRQHandler</a> from bsp_gpio.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[27]">EXTI2_IRQHandler</a> from bsp_gpio.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[28]">EXTI3_IRQHandler</a> from bsp_gpio.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[29]">EXTI4_IRQHandler</a> from bsp_gpio.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[36]">EXTI5_9_IRQHandler</a> from bsp_gpio.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[23]">FMC_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[17]">HardFault_Handler</a> from gd32e10x_it.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[3f]">I2C0_ER_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[3e]">I2C0_EV_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[41]">I2C1_ER_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[40]">I2C1_EV_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[20]">LVD_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[18]">MemManage_Handler</a> from gd32e10x_it.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[16]">NMI_Handler</a> from gd32e10x_it.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[1d]">PendSV_Handler</a> from gd32e10x_it.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[24]">RCU_CTC_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[48]">RTC_Alarm_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[22]">RTC_IRQHandler</a> from bsp_rtc.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[15]">Reset_Handler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[42]">SPI0_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[43]">SPI1_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[50]">SPI2_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[1b]">SVC_Handler</a> from gd32e10x_it.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[1e]">SysTick_Handler</a> from gd32e10x_it.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[60]">SystemInit</a> from system_gd32e10x.o(.text) referenced from startup_gd32e10x.o(.text)
 <LI><a href="#[21]">TAMPER_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[37]">TIMER0_BRK_TIMER8_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[3a]">TIMER0_Channel_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[39]">TIMER0_TRG_CMT_TIMER10_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[38]">TIMER0_UP_TIMER9_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[3b]">TIMER1_IRQHandler</a> from bsp_timer.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[3c]">TIMER2_IRQHandler</a> from bsp_timer.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[3d]">TIMER3_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[4f]">TIMER4_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[53]">TIMER5_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[54]">TIMER6_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[4a]">TIMER7_BRK_TIMER11_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[4d]">TIMER7_Channel_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[4c]">TIMER7_TRG_CMT_TIMER13_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[4b]">TIMER7_UP_TIMER12_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[51]">UART3_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[52]">UART4_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[44]">USART0_IRQHandler</a> from bsp_uart.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[45]">USART1_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[46]">USART2_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[5e]">USBFS_IRQHandler</a> from gd32e10x_it.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[49]">USBFS_WKUP_IRQHandler</a> from gd32e10x_it.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[1a]">UsageFault_Handler</a> from gd32e10x_it.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[1f]">WWDGT_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[61]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32e10x.o(.text)
 <LI><a href="#[63]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[5]">bsp_DelayMS</a> from bsp_timer.o(.text) referenced 2 times from bsp_usb.o(.data)
 <LI><a href="#[4]">bsp_DelayUS</a> from bsp_timer.o(.text) referenced 2 times from bsp_usb.o(.data)
 <LI><a href="#[3]">cdc_acm_data_handler</a> from cdc_acm_core.o(.text) referenced 2 times from bsp_usb.o(.data)
 <LI><a href="#[1]">cdc_acm_deinit</a> from cdc_acm_core.o(.text) referenced 2 times from bsp_usb.o(.data)
 <LI><a href="#[0]">cdc_acm_init</a> from cdc_acm_core.o(.text) referenced 2 times from bsp_usb.o(.data)
 <LI><a href="#[2]">cdc_acm_req_handler</a> from cdc_acm_core.o(.text) referenced 2 times from bsp_usb.o(.data)
 <LI><a href="#[62]">fputc</a> from bsp_debug.o(.text) referenced from printfa.o(i.__0printf)
 <LI><a href="#[62]">fputc</a> from bsp_debug.o(.text) referenced from printfa.o(i.__0vprintf)
 <LI><a href="#[5f]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[7]">usbd_clrfeature</a> from usbd_std.o(.text) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[13]">usbd_configuration_descriptor_get</a> from usbd_std.o(.text) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[12]">usbd_device_descriptor_get</a> from usbd_std.o(.text) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[d]">usbd_getconfig</a> from usbd_std.o(.text) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[b]">usbd_getdescriptor</a> from usbd_std.o(.text) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[f]">usbd_getinterface</a> from usbd_std.o(.text) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[6]">usbd_getstatus</a> from usbd_std.o(.text) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[8]">usbd_reserved</a> from usbd_std.o(.text) referenced 4 times from usbd_std.o(.data)
 <LI><a href="#[a]">usbd_setaddress</a> from usbd_std.o(.text) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[e]">usbd_setconfig</a> from usbd_std.o(.text) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[c]">usbd_setdescriptor</a> from usbd_std.o(.text) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[9]">usbd_setfeature</a> from usbd_std.o(.text) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[10]">usbd_setinterface</a> from usbd_std.o(.text) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[14]">usbd_string_descriptor_get</a> from usbd_std.o(.text) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[11]">usbd_synchframe</a> from usbd_std.o(.text) referenced 2 times from usbd_std.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[61]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(.text)
</UL>
<P><STRONG><a name="[1a7]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[64]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[19d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1a8]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1a9]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1aa]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1ab]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1ac]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[60]"></a>SystemInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, system_gd32e10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFS_WKUP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(.text)
</UL>
<P><STRONG><a name="[1ad]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 290 bytes, Stack size 28 bytes, system_gd32e10x.o(.text), UNUSED)

<P><STRONG><a name="[15]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>ADC0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN0_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CAN0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>CAN1_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>RCU_CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIMER0_BRK_TIMER8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIMER0_TRG_CMT_TIMER10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIMER0_UP_TIMER9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIMER5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIMER7_BRK_TIMER11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIMER7_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIMER7_TRG_CMT_TIMER13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIMER7_UP_TIMER12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>bkp_deinit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gd32e10x_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bkp_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_bkp_reset_enable
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_bkp_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration
</UL>

<P><STRONG><a name="[b2]"></a>bkp_data_write</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gd32e10x_bkp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_process
</UL>

<P><STRONG><a name="[b1]"></a>bkp_data_read</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gd32e10x_bkp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_process
</UL>

<P><STRONG><a name="[1ae]"></a>bkp_rtc_calibration_output_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32e10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>bkp_rtc_calibration_output_disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>bkp_rtc_signal_output_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32e10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>bkp_rtc_signal_output_disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>bkp_rtc_output_select</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32e10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>bkp_rtc_clock_output_select</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32e10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>bkp_rtc_clock_calibration_direction_select</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>bkp_rtc_calibration_value_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32e10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>bkp_tamper_detection_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>bkp_tamper_detection_disable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32e10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>bkp_tamper_active_level_set</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32e10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>bkp_interrupt_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>bkp_interrupt_disable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32e10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[1bb]"></a>bkp_flag_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32e10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>bkp_flag_clear</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>bkp_interrupt_flag_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32e10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>bkp_interrupt_flag_clear</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>exti_deinit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32e10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>exti_init</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, gd32e10x_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = exti_init
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_key_init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_interrupt_config
</UL>

<P><STRONG><a name="[fa]"></a>exti_interrupt_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32e10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_interrupt_config
</UL>

<P><STRONG><a name="[1c0]"></a>exti_event_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[1c1]"></a>exti_interrupt_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32e10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>exti_event_disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>exti_flag_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32e10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>exti_flag_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32e10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>exti_interrupt_flag_get</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32e10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
</UL>

<P><STRONG><a name="[98]"></a>exti_interrupt_flag_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32e10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_key_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFS_WKUP_IRQHandler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_interrupt_config
</UL>

<P><STRONG><a name="[1c5]"></a>exti_software_interrupt_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>exti_software_interrupt_disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>gpio_deinit</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, gd32e10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>

<P><STRONG><a name="[6f]"></a>gpio_afio_deinit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd32e10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>

<P><STRONG><a name="[9a]"></a>gpio_init</STRONG> (Thumb, 188 bytes, Stack size 20 bytes, gd32e10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_gpio_config
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GPIO
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_key_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_init
</UL>

<P><STRONG><a name="[9c]"></a>gpio_bit_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RESET
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteData_16Bit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GPIO
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_SCAN
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>

<P><STRONG><a name="[9b]"></a>gpio_bit_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RESET
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteData_16Bit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GPIO
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_SCAN
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>

<P><STRONG><a name="[151]"></a>gpio_bit_write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_toggle
</UL>

<P><STRONG><a name="[1c7]"></a>gpio_port_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>gpio_input_bit_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_key_state_get
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_ROW_SCAN
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_toggle
</UL>

<P><STRONG><a name="[1c8]"></a>gpio_input_port_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32e10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1c9]"></a>gpio_output_bit_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>gpio_output_port_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32e10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>gpio_pin_remap_config</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, gd32e10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_pin_remap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
</UL>

<P><STRONG><a name="[110]"></a>gpio_exti_source_select</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, gd32e10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_exti_source_select
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_key_init
</UL>

<P><STRONG><a name="[1cb]"></a>gpio_event_output_config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32e10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>gpio_event_output_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32e10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>gpio_event_output_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32e10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>gpio_pin_lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1cf]"></a>gpio_compensation_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>gpio_compensation_flag_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>nvic_priority_group_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_config
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_config
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_process
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_interrupt_config
</UL>

<P><STRONG><a name="[70]"></a>nvic_irq_enable</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, gd32e10x_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_config
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_config
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_process
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_key_init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_interrupt_config
</UL>

<P><STRONG><a name="[1d1]"></a>nvic_irq_disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e10x_misc.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>nvic_vector_table_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32e10x_misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1d2]"></a>system_lowpower_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_misc.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>system_lowpower_reset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_misc.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>systick_clksource_set</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gd32e10x_misc.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>pmu_deinit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd32e10x_pmu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>

<P><STRONG><a name="[1d5]"></a>pmu_lvd_select</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gd32e10x_pmu.o(.text), UNUSED)

<P><STRONG><a name="[1d6]"></a>pmu_ldo_output_select</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32e10x_pmu.o(.text), UNUSED)

<P><STRONG><a name="[1d7]"></a>pmu_lvd_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32e10x_pmu.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>pmu_to_sleepmode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32e10x_pmu.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>pmu_to_deepsleepmode</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, gd32e10x_pmu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_suspend
</UL>

<P><STRONG><a name="[1d9]"></a>pmu_to_standbymode</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gd32e10x_pmu.o(.text), UNUSED)

<P><STRONG><a name="[1da]"></a>pmu_wakeup_pin_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32e10x_pmu.o(.text), UNUSED)

<P><STRONG><a name="[1db]"></a>pmu_wakeup_pin_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32e10x_pmu.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>pmu_backup_write_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32e10x_pmu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_process
</UL>

<P><STRONG><a name="[1dc]"></a>pmu_backup_write_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32e10x_pmu.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>pmu_flag_clear</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gd32e10x_pmu.o(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>pmu_flag_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e10x_pmu.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>rcu_flag_get</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_process
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
</UL>

<P><STRONG><a name="[73]"></a>rcu_osci_stab_wait</STRONG> (Thumb, 342 bytes, Stack size 20 bytes, gd32e10x_rcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rcu_osci_stab_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_deinit
</UL>

<P><STRONG><a name="[75]"></a>rcu_deinit</STRONG> (Thumb, 84 bytes, Stack size 4 bytes, gd32e10x_rcu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
</UL>

<P><STRONG><a name="[99]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer8_config
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_config
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_config
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_process
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GPIO
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_key_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFS_WKUP_IRQHandler
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clock_config
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_interrupt_config
</UL>

<P><STRONG><a name="[1df]"></a>rcu_periph_clock_disable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[1e0]"></a>rcu_periph_clock_sleep_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>rcu_periph_clock_sleep_disable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_afio_deinit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_deinit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_deinit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_deinit
</UL>

<P><STRONG><a name="[6e]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_afio_deinit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_deinit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_deinit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_deinit
</UL>

<P><STRONG><a name="[6a]"></a>rcu_bkp_reset_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_deinit
</UL>

<P><STRONG><a name="[6b]"></a>rcu_bkp_reset_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_deinit
</UL>

<P><STRONG><a name="[1e2]"></a>rcu_system_clock_source_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>rcu_system_clock_source_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>rcu_ahb_clock_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>rcu_apb1_clock_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>rcu_apb2_clock_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>rcu_ckout0_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>rcu_pll_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>rcu_pllpresel_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>rcu_predv0_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>rcu_predv1_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>rcu_pll1_config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>rcu_pll2_config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[1ee]"></a>rcu_adc_clock_config</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>rcu_usb_clock_config</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFS_WKUP_IRQHandler
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clock_config
</UL>

<P><STRONG><a name="[a3]"></a>rcu_rtc_clock_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration
</UL>

<P><STRONG><a name="[1ef]"></a>rcu_i2s1_clock_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>rcu_i2s2_clock_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>rcu_ck48m_clock_config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>rcu_all_reset_flag_clear</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[1f3]"></a>rcu_interrupt_flag_get</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[1f4]"></a>rcu_interrupt_flag_clear</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>rcu_interrupt_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[1f6]"></a>rcu_interrupt_disable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>rcu_lxtal_drive_capability_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration
</UL>

<P><STRONG><a name="[a2]"></a>rcu_osci_on</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration
</UL>

<P><STRONG><a name="[1f7]"></a>rcu_osci_off</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>rcu_osci_bypass_mode_enable</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>rcu_osci_bypass_mode_disable</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[1fa]"></a>rcu_hxtal_clock_monitor_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[1fb]"></a>rcu_hxtal_clock_monitor_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>rcu_irc8m_adjust_value_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[1fd]"></a>rcu_deepsleep_voltage_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_rcu.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>rcu_clock_freq_get</STRONG> (Thumb, 352 bytes, Stack size 96 bytes, gd32e10x_rcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_psc_config
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clock_config
</UL>

<P><STRONG><a name="[77]"></a>rtc_configuration_mode_enter</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32e10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_alarm_config
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_prescaler_set
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_counter_set
</UL>

<P><STRONG><a name="[78]"></a>rtc_configuration_mode_exit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32e10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_alarm_config
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_prescaler_set
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_counter_set
</UL>

<P><STRONG><a name="[76]"></a>rtc_counter_set</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, gd32e10x_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rtc_counter_set
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_exit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_adjust
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>rtc_prescaler_set</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, gd32e10x_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rtc_prescaler_set
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_exit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration
</UL>

<P><STRONG><a name="[a5]"></a>rtc_lwoff_wait</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_adjust
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_process
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>rtc_register_sync_wait</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32e10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_process
</UL>

<P><STRONG><a name="[7a]"></a>rtc_alarm_config</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, gd32e10x_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_exit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_enter
</UL>

<P><STRONG><a name="[b4]"></a>rtc_counter_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_process
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_xml
</UL>

<P><STRONG><a name="[1fe]"></a>rtc_divider_get</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32e10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[1ff]"></a>rtc_flag_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[200]"></a>rtc_flag_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32e10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>rtc_interrupt_flag_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[9e]"></a>rtc_interrupt_flag_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32e10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[a6]"></a>rtc_interrupt_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_process
</UL>

<P><STRONG><a name="[201]"></a>rtc_interrupt_disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>spi_i2s_deinit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, gd32e10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_i2s_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
</UL>

<P><STRONG><a name="[d6]"></a>spi_struct_para_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
</UL>

<P><STRONG><a name="[d7]"></a>spi_init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gd32e10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
</UL>

<P><STRONG><a name="[d8]"></a>spi_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
</UL>

<P><STRONG><a name="[202]"></a>spi_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[203]"></a>i2s_init</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gd32e10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>i2s_psc_config</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, gd32e10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>

<P><STRONG><a name="[204]"></a>i2s_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[205]"></a>i2s_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[206]"></a>spi_nss_output_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[207]"></a>spi_nss_output_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[208]"></a>spi_nss_internal_high</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[209]"></a>spi_nss_internal_low</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[20a]"></a>spi_dma_enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32e10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[20b]"></a>spi_dma_disable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32e10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[20c]"></a>spi_i2s_data_frame_format_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[20d]"></a>spi_i2s_data_transmit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[20e]"></a>spi_i2s_data_receive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32e10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[20f]"></a>spi_bidirectional_transfer_config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32e10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[210]"></a>spi_crc_polynomial_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32e10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[211]"></a>spi_crc_polynomial_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32e10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[212]"></a>spi_crc_on</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[213]"></a>spi_crc_off</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>spi_crc_next</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[215]"></a>spi_crc_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>spi_ti_mode_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>spi_ti_mode_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>spi_nssp_mode_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>spi_nssp_mode_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[21a]"></a>qspi_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32e10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>qspi_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32e10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[21c]"></a>qspi_write_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32e10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[21d]"></a>qspi_read_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32e10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[21e]"></a>qspi_io23_output_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32e10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>qspi_io23_output_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32e10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>spi_i2s_interrupt_enable</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gd32e10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[221]"></a>spi_i2s_interrupt_disable</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gd32e10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[222]"></a>spi_i2s_interrupt_flag_get</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, gd32e10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[223]"></a>spi_i2s_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>spi_crc_error_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>timer_deinit</STRONG> (Thumb, 374 bytes, Stack size 8 bytes, gd32e10x_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer8_config
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_config
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_config
</UL>

<P><STRONG><a name="[e0]"></a>timer_struct_para_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer8_config
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_config
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_config
</UL>

<P><STRONG><a name="[e1]"></a>timer_init</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer8_config
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_config
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_config
</UL>

<P><STRONG><a name="[ec]"></a>timer_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer8_config
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functionSelect
</UL>

<P><STRONG><a name="[e3]"></a>timer_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_config
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_config
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functionSelect
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trade_state
</UL>

<P><STRONG><a name="[eb]"></a>timer_auto_reload_shadow_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer8_config
</UL>

<P><STRONG><a name="[225]"></a>timer_auto_reload_shadow_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[226]"></a>timer_update_event_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>timer_update_event_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[228]"></a>timer_counter_alignment</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[229]"></a>timer_counter_up_direction</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[22a]"></a>timer_counter_down_direction</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[22b]"></a>timer_prescaler_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[22c]"></a>timer_repetition_value_config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[22d]"></a>timer_autoreload_value_config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[22e]"></a>timer_counter_value_config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[22f]"></a>timer_counter_read</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[230]"></a>timer_prescaler_read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[231]"></a>timer_single_pulse_mode_config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>timer_update_source_config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[233]"></a>timer_dma_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>timer_dma_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[235]"></a>timer_channel_dma_request_source_select</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[236]"></a>timer_dma_transfer_config</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[237]"></a>timer_event_software_generate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[238]"></a>timer_break_struct_para_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[239]"></a>timer_break_config</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>timer_break_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>timer_break_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[23c]"></a>timer_automatic_output_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>timer_automatic_output_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>timer_primary_output_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[23f]"></a>timer_channel_control_shadow_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>timer_channel_control_shadow_update_config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>timer_channel_output_struct_para_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer8_config
</UL>

<P><STRONG><a name="[e7]"></a>timer_channel_output_config</STRONG> (Thumb, 516 bytes, Stack size 8 bytes, gd32e10x_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_channel_output_config
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer8_config
</UL>

<P><STRONG><a name="[e9]"></a>timer_channel_output_mode_config</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer8_config
</UL>

<P><STRONG><a name="[e8]"></a>timer_channel_output_pulse_value_config</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer8_config
</UL>

<P><STRONG><a name="[ea]"></a>timer_channel_output_shadow_config</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer8_config
</UL>

<P><STRONG><a name="[241]"></a>timer_channel_output_fast_config</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[242]"></a>timer_channel_output_clear_config</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[243]"></a>timer_channel_output_polarity_config</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>timer_channel_complementary_output_polarity_config</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[245]"></a>timer_channel_output_state_config</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>timer_channel_complementary_output_state_config</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>timer_channel_input_struct_para_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>timer_channel_input_capture_prescaler_config</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_input_pwm_capture_config
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_input_capture_config
</UL>

<P><STRONG><a name="[7f]"></a>timer_input_capture_config</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, gd32e10x_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_input_capture_prescaler_config
</UL>

<P><STRONG><a name="[248]"></a>timer_channel_capture_value_register_read</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>timer_input_pwm_capture_config</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, gd32e10x_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_input_capture_prescaler_config
</UL>

<P><STRONG><a name="[249]"></a>timer_hall_mode_config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>timer_input_trigger_source_select</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_external_trigger_as_external_clock_config
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_internal_trigger_as_external_clock_config
</UL>

<P><STRONG><a name="[24a]"></a>timer_master_output_trigger_source_select</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[24b]"></a>timer_slave_mode_select</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[24c]"></a>timer_master_slave_mode_config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>timer_external_trigger_config</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gd32e10x_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_external_clock_mode1_config
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_external_clock_mode0_config
</UL>

<P><STRONG><a name="[24d]"></a>timer_quadrature_decoder_mode_config</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[24e]"></a>timer_internal_clock_config</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>timer_internal_trigger_as_external_clock_config</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gd32e10x_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_input_trigger_source_select
</UL>

<P><STRONG><a name="[84]"></a>timer_external_trigger_as_external_clock_config</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, gd32e10x_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_input_trigger_source_select
</UL>

<P><STRONG><a name="[85]"></a>timer_external_clock_mode0_config</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, gd32e10x_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_external_trigger_config
</UL>

<P><STRONG><a name="[87]"></a>timer_external_clock_mode1_config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, gd32e10x_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_external_trigger_config
</UL>

<P><STRONG><a name="[24f]"></a>timer_external_clock_mode1_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[250]"></a>timer_write_chxval_register_config</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[251]"></a>timer_output_value_selection_config</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>timer_interrupt_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_config
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_config
</UL>

<P><STRONG><a name="[252]"></a>timer_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[253]"></a>timer_interrupt_flag_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[254]"></a>timer_interrupt_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[255]"></a>timer_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[256]"></a>timer_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32e10x_timer.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>usart_deinit</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, gd32e10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
</UL>

<P><STRONG><a name="[89]"></a>usart_baudrate_set</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, gd32e10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
</UL>

<P><STRONG><a name="[107]"></a>usart_parity_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
</UL>

<P><STRONG><a name="[108]"></a>usart_word_length_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
</UL>

<P><STRONG><a name="[109]"></a>usart_stop_bit_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
</UL>

<P><STRONG><a name="[10c]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
</UL>

<P><STRONG><a name="[257]"></a>usart_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>usart_transmit_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
</UL>

<P><STRONG><a name="[10a]"></a>usart_receive_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
</UL>

<P><STRONG><a name="[258]"></a>usart_data_first_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[259]"></a>usart_invert_config</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25a]"></a>usart_receiver_timeout_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>usart_receiver_timeout_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25c]"></a>usart_receiver_timeout_threshold_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>usart_data_transmit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_SendOneData
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_SendData
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_SendString
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[ae]"></a>usart_data_receive</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_scanf
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[25d]"></a>usart_address_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25e]"></a>usart_mute_mode_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25f]"></a>usart_mute_mode_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[260]"></a>usart_mute_mode_wakeup_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[261]"></a>usart_lin_mode_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[262]"></a>usart_lin_mode_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[263]"></a>usart_lin_break_detection_length_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[264]"></a>usart_send_break</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[265]"></a>usart_halfduplex_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[266]"></a>usart_halfduplex_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>usart_synchronous_clock_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[268]"></a>usart_synchronous_clock_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[269]"></a>usart_synchronous_clock_config</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gd32e10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[26a]"></a>usart_guard_time_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[26b]"></a>usart_smartcard_mode_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>usart_smartcard_mode_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[26d]"></a>usart_smartcard_mode_nack_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>usart_smartcard_mode_nack_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>usart_smartcard_autoretry_config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>usart_block_length_config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[271]"></a>usart_irda_mode_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[272]"></a>usart_irda_mode_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[273]"></a>usart_prescaler_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>usart_irda_lowpower_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[275]"></a>usart_hardware_flow_rts_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[276]"></a>usart_hardware_flow_cts_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>usart_dma_receive_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[278]"></a>usart_dma_transmit_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[279]"></a>usart_hardware_flow_coherence_config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32e10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>usart_flag_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32e10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_SendOneData
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_SendData
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_SendString
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_scanf
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[27a]"></a>usart_flag_clear</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32e10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>usart_interrupt_enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32e10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conect_HTTPS
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPS_check
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPS_para
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_check
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSQ_check
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_allo
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPS_cfg
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_order
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_HTTPS
</UL>

<P><STRONG><a name="[10f]"></a>usart_interrupt_disable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32e10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[10e]"></a>usart_interrupt_flag_get</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gd32e10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[27b]"></a>usart_interrupt_flag_clear</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32e10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>bsp_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = bsp_Init &rArr; rtc_process &rArr; print_calendar &rArr; Show_Str &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_SetWindows &rArr; LCD_WriteRAM_Prepare &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_process
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitTimer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GPIO
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DebugInit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfLogo
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>bsp_RunPer10ms</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ISR
</UL>

<P><STRONG><a name="[f2]"></a>bsp_RunPer1ms</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ISR
</UL>

<P><STRONG><a name="[ef]"></a>bsp_Idle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
</UL>

<P><STRONG><a name="[25]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_gpio.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_gpio.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_gpio.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_gpio.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_gpio.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI5_9_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI10_15_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>bsp_GPIO</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, bsp_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bsp_GPIO &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[22]"></a>RTC_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_interrupt_flag_clear
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_interrupt_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>rtc_configuration</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, bsp_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rtc_configuration &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_deinit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_interrupt_enable
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_register_sync_wait
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_lwoff_wait
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_prescaler_set
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_on
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_lxtal_drive_capability_config
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_rtc_clock_config
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_backup_write_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_process
</UL>

<P><STRONG><a name="[a7]"></a>print_calendar</STRONG> (Thumb, 512 bytes, Stack size 112 bytes, bsp_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = print_calendar &rArr; Show_Str &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_SetWindows &rArr; LCD_WriteRAM_Prepare &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_process
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>calc_days_num_by_date</STRONG> (Thumb, 104 bytes, Stack size 72 bytes, bsp_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = calc_days_num_by_date &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_regulate
</UL>

<P><STRONG><a name="[ac]"></a>usart_scanf</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, bsp_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = usart_scanf &rArr; Debug_Printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Printf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_regulate
</UL>

<P><STRONG><a name="[af]"></a>time_regulate</STRONG> (Thumb, 538 bytes, Stack size 96 bytes, bsp_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = time_regulate &rArr; calc_days_num_by_date &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_scanf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_days_num_by_date
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Printf
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_adjust
</UL>

<P><STRONG><a name="[b0]"></a>time_adjust</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = time_adjust &rArr; time_regulate &rArr; calc_days_num_by_date &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_regulate
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_lwoff_wait
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_counter_set
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_process
</UL>

<P><STRONG><a name="[92]"></a>rtc_process</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, bsp_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rtc_process &rArr; print_calendar &rArr; Show_Str &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_SetWindows &rArr; LCD_WriteRAM_Prepare &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_data_read
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_data_write
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_adjust
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_calendar
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Printf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_interrupt_enable
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_counter_get
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_register_sync_wait
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_lwoff_wait
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_flag_get
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_backup_write_enable
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[b5]"></a>LCD_WR_REG</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindows
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[b7]"></a>LCD_WR_DATA</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindows
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[b8]"></a>LCD_WriteReg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bsp_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_WriteReg &rArr; LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_direction
</UL>

<P><STRONG><a name="[b9]"></a>LCD_WriteRAM_Prepare</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_WriteRAM_Prepare &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindows
</UL>

<P><STRONG><a name="[ba]"></a>Lcd_WriteData_16Bit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bsp_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Lcd_WriteData_16Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_Drawbmp16
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont32
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont24
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont16
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPoint
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawBat
</UL>

<P><STRONG><a name="[bb]"></a>LCD_SetWindows</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, bsp_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_SetWindows &rArr; LCD_WriteRAM_Prepare &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_Drawbmp16
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont32
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont24
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont16
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawBat
</UL>

<P><STRONG><a name="[bc]"></a>LCD_SetCursor</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bsp_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_SetCursor &rArr; LCD_SetWindows &rArr; LCD_WriteRAM_Prepare &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindows
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPoint
</UL>

<P><STRONG><a name="[bd]"></a>LCD_DrawPoint</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bsp_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_SetWindows &rArr; LCD_WriteRAM_Prepare &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteData_16Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont32
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont24
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont16
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>

<P><STRONG><a name="[be]"></a>LCD_Clear</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, bsp_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_Clear &rArr; LCD_SetWindows &rArr; LCD_WriteRAM_Prepare &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_WriteByte
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindows
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_test
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTestPage
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[bf]"></a>LCD_RESET</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_RESET &rArr; bsp_DelayMS
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[c0]"></a>LCD_direction</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, bsp_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_direction &rArr; LCD_WriteReg &rArr; LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Test
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[90]"></a>LCD_Init</STRONG> (Thumb, 446 bytes, Stack size 8 bytes, bsp_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LCD_Init &rArr; spi_config &rArr; spi_gpio_config &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_gpio_config
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_direction
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RESET
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[c3]"></a>DrawTestPage</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, bsp_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_StrCenter
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Test
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chinese_Font_test
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Triangle
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;English_Font_test
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Circle
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_FillRec
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_test
</UL>

<P><STRONG><a name="[c6]"></a>Display_ButtonUp</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, bsp_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_test
</UL>

<P><STRONG><a name="[c8]"></a>menu_test</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, bsp_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_StrCenter
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ButtonUp
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
</UL>

<P><STRONG><a name="[c9]"></a>main_test</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, bsp_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_StrCenter
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTestPage
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
</UL>

<P><STRONG><a name="[ca]"></a>Test_Color</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, bsp_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
</UL>

<P><STRONG><a name="[cb]"></a>Test_FillRec</STRONG> (Thumb, 606 bytes, Stack size 32 bytes, bsp_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawFillRectangle
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTestPage
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
</UL>

<P><STRONG><a name="[ce]"></a>Test_Circle</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, bsp_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_circle
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTestPage
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
</UL>

<P><STRONG><a name="[d0]"></a>English_Font_test</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, bsp_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTestPage
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
</UL>

<P><STRONG><a name="[d1]"></a>Test_Triangle</STRONG> (Thumb, 488 bytes, Stack size 48 bytes, bsp_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_Triangel
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Triangel
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTestPage
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
</UL>

<P><STRONG><a name="[d4]"></a>Chinese_Font_test</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, bsp_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTestPage
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
</UL>

<P><STRONG><a name="[d5]"></a>Rotate_Test</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, bsp_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTestPage
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_direction
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
</UL>

<P><STRONG><a name="[b6]"></a>SPI0_WriteByte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, bsp_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteData_16Bit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>

<P><STRONG><a name="[c1]"></a>spi_gpio_config</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = spi_gpio_config &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[c2]"></a>spi_config</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, bsp_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = spi_config &rArr; spi_gpio_config &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_gpio_config
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_struct_para_init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_deinit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[8b]"></a>Debug_Printf</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, bsp_debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Debug_Printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_StopTimer
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_StartAutoTimer
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_StartTimer
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_regulate
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_scanf
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_process
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfLogo
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_SCAN
</UL>

<P><STRONG><a name="[8f]"></a>bsp_DebugInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = bsp_DebugInit &rArr; gd_eval_com_init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[db]"></a>Debug_SendString</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bsp_debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Debug_SendString &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trade_state
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_order
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Code_url
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_HTTPS
</UL>

<P><STRONG><a name="[dd]"></a>Debug_SendData</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bsp_debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>

<P><STRONG><a name="[de]"></a>Debug_SendOneData</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Debug_SendOneData &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[62]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsp_debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fputc &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0printf)
<LI> printfa.o(i.__0vprintf)
</UL>
<P><STRONG><a name="[3b]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bsp_timer.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bsp_timer.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[df]"></a>timer1_config</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, bsp_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = timer1_config &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_struct_para_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitTimer
</UL>

<P><STRONG><a name="[e4]"></a>timer2_config</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, bsp_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = timer2_config &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_struct_para_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitTimer
</UL>

<P><STRONG><a name="[e5]"></a>timer8_config</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, bsp_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer8_config &rArr; timer_channel_output_config
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_shadow_config
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_mode_config
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_config
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_struct_para_init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_enable
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_struct_para_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trade_state
</UL>

<P><STRONG><a name="[8d]"></a>bsp_InitTimer</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, bsp_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsp_InitTimer &rArr; timer2_config &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_config
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_config
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[4]"></a>bsp_DelayUS</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, bsp_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsp_DelayUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_usb.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>bsp_DelayMS</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bsp_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_DelayMS
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Idle
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Test
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chinese_Font_test
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Triangle
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;English_Font_test
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Circle
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_FillRec
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Color
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_test
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_test
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RESET
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GPIO
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlockByPasswd
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPasswd
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPassword
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_ROW_SCAN
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conect_HTTPS
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPS_check
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPS_para
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_check
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSQ_check
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_allo
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPS_cfg
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;N58_init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trade_state
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_order
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_HTTPS
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_usb.o(.data)
</UL>
<P><STRONG><a name="[f0]"></a>SysTick_ISR</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, bsp_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SoftTimerDec
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_RunPer1ms
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_RunPer10ms
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f4]"></a>bsp_StartTimer</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, bsp_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Printf
</UL>

<P><STRONG><a name="[f5]"></a>bsp_StartAutoTimer</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, bsp_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Printf
</UL>

<P><STRONG><a name="[f6]"></a>bsp_StopTimer</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, bsp_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Printf
</UL>

<P><STRONG><a name="[27c]"></a>bsp_CheckTimer</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, bsp_timer.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>bsp_GetRunTime</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
</UL>

<P><STRONG><a name="[f8]"></a>usb_interrupt_config</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, bsp_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usb_interrupt_config &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_enable
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_init
</UL>

<P><STRONG><a name="[fb]"></a>usb_clock_config</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, bsp_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = usb_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_usb_clock_config
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_init
</UL>

<P><STRONG><a name="[91]"></a>bsp_usb_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bsp_usb_init &rArr; usb_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clock_config
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_interrupt_config
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[fe]"></a>usb_Tx</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_usb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_data_send
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[101]"></a>usb_Tx_onedata</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bsp_usb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_data_send
</UL>

<P><STRONG><a name="[102]"></a>usb_Tx_halfdata</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bsp_usb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_data_send
</UL>

<P><STRONG><a name="[103]"></a>usb_Tx_worddata</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, bsp_usb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_data_send
</UL>

<P><STRONG><a name="[104]"></a>usb_Rx</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, bsp_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usb_Rx &rArr; cdc_acm_data_receive &rArr; usbd_ep_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_data_receive
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>uart0_init</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, bsp_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = uart0_init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[44]"></a>USART0_IRQHandler</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, bsp_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART0_IRQHandler &rArr; Debug_SendOneData &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_SendOneData
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_disable
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>lock_init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, bsp_lock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lock_init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exti_source_select
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[111]"></a>Open</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_lock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Open &rArr; bsp_DelayMS
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPasswd
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trade_state
</UL>

<P><STRONG><a name="[112]"></a>Make_xml</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, bsp_n58.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = Make_xml &rArr; MD5Final &rArr; MD5Update &rArr; MD5Transform &rArr; MD5Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_counter_get
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlockByPasswd
</UL>

<P><STRONG><a name="[118]"></a>Make_xml1</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, bsp_n58.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = Make_xml1 &rArr; MD5Final &rArr; MD5Update &rArr; MD5Transform &rArr; MD5Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functionSelect
</UL>

<P><STRONG><a name="[119]"></a>Send_HTTPS</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, bsp_n58.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Send_HTTPS &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_SendString
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Buffer
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlockByPasswd
</UL>

<P><STRONG><a name="[11c]"></a>Code_url</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, bsp_n58.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = Code_url &rArr; EncodeData &rArr; GetEncodeVersion &rArr; EncodeSourceData &rArr; GetBitLength
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_SendString
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawBat
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeData
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Buffer
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlockByPasswd
</UL>

<P><STRONG><a name="[11f]"></a>Check_order</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, bsp_n58.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Check_order &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_SendString
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_txbuffer
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Buffer
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functionSelect
</UL>

<P><STRONG><a name="[122]"></a>trade_state</STRONG> (Thumb, 478 bytes, Stack size 160 bytes, bsp_n58.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = trade_state &rArr; Show_Str &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_SetWindows &rArr; LCD_WriteRAM_Prepare &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer8_config
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_SendString
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_txbuffer
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functionSelect
</UL>

<P><STRONG><a name="[5f]"></a>main</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = main &rArr; functionSelect &rArr; unlockByPasswd &rArr;  unlockByPasswd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_calendar
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_counter_get
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_lwoff_wait
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_counter_set
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_toggle
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functionSelect
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;N58_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_Rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[16]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>HardFault_Handler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gd32e10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HardFault_Handler &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gd32e10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; SysTick_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>USBFS_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gd32e10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USBFS_IRQHandler &rArr; usbd_isr &rArr; usbd_intf_outep &rArr; usbd_setup_transaction &rArr; usbd_device_class_request &rArr; usbd_ctlstatus_tx &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>USBFS_WKUP_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gd32e10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBFS_WKUP_IRQHandler &rArr; SystemInit &rArr; system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_usb_clock_config
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clock_ungate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[129]"></a>GUI_DrawPoint</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lcd_gui.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteData_16Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_circle_8
</UL>

<P><STRONG><a name="[c4]"></a>LCD_Fill</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, lcd_gui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_Fill &rArr; LCD_SetWindows &rArr; LCD_WriteRAM_Prepare &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindows
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteData_16Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawFillRectangle
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_Triangel
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Triangle
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Circle
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_FillRec
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Color
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTestPage
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlockByPasswd
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPasswd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disPlayFunctionSelect2
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functionSelect
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trade_state
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Code_url
</UL>

<P><STRONG><a name="[c7]"></a>LCD_DrawLine</STRONG> (Thumb, 176 bytes, Stack size 72 bytes, lcd_gui.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Triangel
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ButtonUp
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoints
</UL>

<P><STRONG><a name="[cc]"></a>LCD_DrawRectangle</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lcd_gui.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_FillRec
</UL>

<P><STRONG><a name="[cd]"></a>LCD_DrawFillRectangle</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lcd_gui.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_FillRec
</UL>

<P><STRONG><a name="[12a]"></a>_draw_circle_8</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, lcd_gui.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_circle
</UL>

<P><STRONG><a name="[cf]"></a>gui_circle</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, lcd_gui.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_circle_8
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Circle
</UL>

<P><STRONG><a name="[d2]"></a>Draw_Triangel</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, lcd_gui.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Triangle
</UL>

<P><STRONG><a name="[d3]"></a>Fill_Triangel</STRONG> (Thumb, 532 bytes, Stack size 72 bytes, lcd_gui.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Triangle
</UL>

<P><STRONG><a name="[12c]"></a>LCD_ShowChar</STRONG> (Thumb, 292 bytes, Stack size 64 bytes, lcd_gui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_SetWindows &rArr; LCD_WriteRAM_Prepare &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindows
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteData_16Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
</UL>

<P><STRONG><a name="[12d]"></a>LCD_ShowString</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, lcd_gui.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>

<P><STRONG><a name="[12e]"></a>mypow</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd_gui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mypow
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
</UL>

<P><STRONG><a name="[a9]"></a>LCD_ShowNum</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, lcd_gui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_SetWindows &rArr; LCD_WriteRAM_Prepare &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mypow
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_calendar
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disEnterPasswd
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functionSelect
</UL>

<P><STRONG><a name="[12f]"></a>GUI_DrawFont16</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, lcd_gui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GUI_DrawFont16 &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_SetWindows &rArr; LCD_WriteRAM_Prepare &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindows
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteData_16Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
</UL>

<P><STRONG><a name="[130]"></a>GUI_DrawFont24</STRONG> (Thumb, 268 bytes, Stack size 48 bytes, lcd_gui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GUI_DrawFont24 &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_SetWindows &rArr; LCD_WriteRAM_Prepare &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindows
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteData_16Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
</UL>

<P><STRONG><a name="[131]"></a>GUI_DrawFont32</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, lcd_gui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GUI_DrawFont32 &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_SetWindows &rArr; LCD_WriteRAM_Prepare &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindows
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteData_16Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
</UL>

<P><STRONG><a name="[aa]"></a>Show_Str</STRONG> (Thumb, 264 bytes, Stack size 64 bytes, lcd_gui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Show_Str &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_SetWindows &rArr; LCD_WriteRAM_Prepare &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont32
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont24
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont16
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_StrCenter
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Test
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chinese_Font_test
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;English_Font_test
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Color
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_calendar
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlockByPasswd
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPasswd
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disEnterPasswd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disPlayFunctionSelect2
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disPlayFunctionSelect1
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disPlayFunctionSelect
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functionSelect
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trade_state
</UL>

<P><STRONG><a name="[c5]"></a>Gui_StrCenter</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, lcd_gui.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_test
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_test
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTestPage
</UL>

<P><STRONG><a name="[132]"></a>Gui_Drawbmp16</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, lcd_gui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Gui_Drawbmp16 &rArr; LCD_SetWindows &rArr; LCD_WriteRAM_Prepare &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindows
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteData_16Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlockByPasswd
</UL>

<P><STRONG><a name="[11e]"></a>Gui_DrawBat</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, lcd_gui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Gui_DrawBat &rArr; LCD_SetWindows &rArr; LCD_WriteRAM_Prepare &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindows
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteData_16Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disPlayFunctionSelect1
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disPlayFunctionSelect
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Code_url
</UL>

<P><STRONG><a name="[133]"></a>LCD_DrawPoints</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lcd_gui.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[0]"></a>cdc_acm_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, cdc_acm_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = cdc_acm_init &rArr; usbd_ep_init
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_usb.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>cdc_acm_deinit</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cdc_acm_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = cdc_acm_deinit &rArr; usbd_ep_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_usb.o(.data)
</UL>
<P><STRONG><a name="[137]"></a>cdc_acm_EP0_RxReady</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, cdc_acm_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_data_handler
</UL>

<P><STRONG><a name="[3]"></a>cdc_acm_data_handler</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, cdc_acm_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = cdc_acm_data_handler &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_rxcount_get
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_tx
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_EP0_RxReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_usb.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>cdc_acm_req_handler</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, cdc_acm_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = cdc_acm_req_handler &rArr; usbd_ctltx &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctltx
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctlrx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_usb.o(.data)
</UL>
<P><STRONG><a name="[105]"></a>cdc_acm_data_receive</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cdc_acm_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cdc_acm_data_receive &rArr; usbd_ep_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_Rx
</UL>

<P><STRONG><a name="[100]"></a>cdc_acm_data_send</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cdc_acm_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_Tx_worddata
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_Tx_halfdata
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_Tx_onedata
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_Tx
</UL>

<P><STRONG><a name="[114]"></a>MD5Init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, md5.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_xml1
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_xml
</UL>

<P><STRONG><a name="[13e]"></a>MD5Decode</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MD5Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
</UL>

<P><STRONG><a name="[13d]"></a>MD5Transform</STRONG> (Thumb, 1886 bytes, Stack size 284 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = MD5Transform &rArr; MD5Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
</UL>

<P><STRONG><a name="[116]"></a>MD5Update</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = MD5Update &rArr; MD5Transform &rArr; MD5Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_xml1
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_xml
</UL>

<P><STRONG><a name="[13f]"></a>MD5Encode</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MD5Encode
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
</UL>

<P><STRONG><a name="[117]"></a>MD5Final</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = MD5Final &rArr; MD5Update &rArr; MD5Transform &rArr; MD5Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Encode
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_xml1
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_xml
</UL>

<P><STRONG><a name="[11a]"></a>Clear_Buffer</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, n58.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conect_HTTPS
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPS_check
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPS_para
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_check
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSQ_check
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_allo
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPS_cfg
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;N58_init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_order
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Code_url
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_HTTPS
</UL>

<P><STRONG><a name="[140]"></a>HTTPS_cfg</STRONG> (Thumb, 132 bytes, Stack size 64 bytes, n58.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HTTPS_cfg &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Buffer
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;N58_init
</UL>

<P><STRONG><a name="[141]"></a>IP_allo</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, n58.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IP_allo &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Buffer
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;N58_init
</UL>

<P><STRONG><a name="[142]"></a>CSQ_check</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, n58.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CSQ_check &rArr; bsp_DelayMS
</UL>
<BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Buffer
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;N58_init
</UL>

<P><STRONG><a name="[143]"></a>AT_check</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, n58.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = AT_check &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Buffer
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;N58_init
</UL>

<P><STRONG><a name="[124]"></a>N58_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, n58.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = N58_init &rArr; HTTPS_cfg &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_check
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSQ_check
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_allo
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPS_cfg
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[121]"></a>Clear_txbuffer</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, n58.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trade_state
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_order
</UL>

<P><STRONG><a name="[144]"></a>HTTPS_para</STRONG> (Thumb, 132 bytes, Stack size 88 bytes, n58.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HTTPS_para &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Buffer
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlockByPasswd
</UL>

<P><STRONG><a name="[145]"></a>HTTPS_check</STRONG> (Thumb, 132 bytes, Stack size 88 bytes, n58.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HTTPS_check &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Buffer
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functionSelect
</UL>

<P><STRONG><a name="[146]"></a>Conect_HTTPS</STRONG> (Thumb, 460 bytes, Stack size 40 bytes, n58.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Conect_HTTPS &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Buffer
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlockByPasswd
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functionSelect
</UL>

<P><STRONG><a name="[95]"></a>key_init</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = key_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[147]"></a>KEY_ROW_SCAN</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KEY_ROW_SCAN &rArr; bsp_DelayMS
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_SCAN
</UL>

<P><STRONG><a name="[148]"></a>KEY_SCAN</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = KEY_SCAN &rArr; Debug_Printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Printf
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_ROW_SCAN
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPassword
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functionSelect
</UL>

<P><STRONG><a name="[149]"></a>disPlayFunctionSelect</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = disPlayFunctionSelect &rArr; Show_Str &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_SetWindows &rArr; LCD_WriteRAM_Prepare &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawBat
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functionSelect
</UL>

<P><STRONG><a name="[14a]"></a>disPlayFunctionSelect1</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = disPlayFunctionSelect1 &rArr; Show_Str &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_SetWindows &rArr; LCD_WriteRAM_Prepare &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawBat
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functionSelect
</UL>

<P><STRONG><a name="[14b]"></a>disPlayFunctionSelect2</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = disPlayFunctionSelect2 &rArr; Show_Str &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_SetWindows &rArr; LCD_WriteRAM_Prepare &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functionSelect
</UL>

<P><STRONG><a name="[14c]"></a>disEnterPasswd</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = disEnterPasswd &rArr; Show_Str &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_SetWindows &rArr; LCD_WriteRAM_Prepare &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPassword
</UL>

<P><STRONG><a name="[14d]"></a>getPassword</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = getPassword &rArr; disEnterPasswd &rArr; Show_Str &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_SetWindows &rArr; LCD_WriteRAM_Prepare &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disEnterPasswd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_SCAN
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlockByPasswd
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPasswd
</UL>

<P><STRONG><a name="[14e]"></a>setPasswd</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = setPasswd &rArr; getPassword &rArr; disEnterPasswd &rArr; Show_Str &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_SetWindows &rArr; LCD_WriteRAM_Prepare &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPassword
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functionSelect
</UL>

<P><STRONG><a name="[14f]"></a>unlockByPasswd</STRONG> (Thumb, 476 bytes, Stack size 24 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + In Cycle
<LI>Call Chain = unlockByPasswd &rArr;  unlockByPasswd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlockByPasswd
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPassword
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conect_HTTPS
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPS_para
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_Drawbmp16
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Code_url
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_HTTPS
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_xml
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlockByPasswd
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functionSelect
</UL>

<P><STRONG><a name="[125]"></a>functionSelect</STRONG> (Thumb, 468 bytes, Stack size 24 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = functionSelect &rArr; unlockByPasswd &rArr;  unlockByPasswd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlockByPasswd
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPasswd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disPlayFunctionSelect2
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disPlayFunctionSelect1
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disPlayFunctionSelect
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_SCAN
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conect_HTTPS
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPS_check
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trade_state
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_order
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_xml1
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[150]"></a>gd_eval_led_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, gd32e10x_eval.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>

<P><STRONG><a name="[27d]"></a>gd_eval_led_on</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_eval.o(.text), UNUSED)

<P><STRONG><a name="[27e]"></a>gd_eval_led_off</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_eval.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>gd_eval_led_toggle</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gd32e10x_eval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gd_eval_led_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[152]"></a>gd_eval_key_init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, gd32e10x_eval.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exti_source_select
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>

<P><STRONG><a name="[153]"></a>gd_eval_key_state_get</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gd32e10x_eval.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>

<P><STRONG><a name="[da]"></a>gd_eval_com_init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, gd32e10x_eval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gd_eval_com_init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DebugInit
</UL>

<P><STRONG><a name="[15e]"></a>usb_fifo_write</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usb_fifo_write
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_emptytxfifo_write
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_tx
</UL>

<P><STRONG><a name="[165]"></a>usb_fifo_read</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usb_fifo_read
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_rxfifo
</UL>

<P><STRONG><a name="[15c]"></a>usb_core_select</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[154]"></a>usb_core_init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usb_core_init &rArr; usb_core_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_core_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[159]"></a>usb_txfifo_flush</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usb_txfifo_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_reset
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_fifo_flush
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_device_stop
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_devcore_init
</UL>

<P><STRONG><a name="[15a]"></a>usb_rxfifo_flush</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usb_rxfifo_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_fifo_flush
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_device_stop
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_devcore_init
</UL>

<P><STRONG><a name="[15d]"></a>usb_mode_set</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usb_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[158]"></a>usb_devcore_init</STRONG> (Thumb, 434 bytes, Stack size 24 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usb_devcore_init &rArr; usb_rxfifo_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rxfifo_flush
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_txfifo_flush
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_devint_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[160]"></a>usb_ep0_startout</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_ep0_startout
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_reset
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctlstatus_rx
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctlstatus_tx
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
</UL>

<P><STRONG><a name="[27f]"></a>usb_remotewakeup_active</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, usb_core.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>usb_clock_ungate</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_clock_ungate
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFS_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[15b]"></a>usb_device_stop</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, usb_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rxfifo_flush
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_txfifo_flush
</UL>

<P><STRONG><a name="[fd]"></a>usbd_init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, usbd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usbd_init &rArr; usb_devcore_init &rArr; usb_rxfifo_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_devcore_init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_mode_set
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_core_init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_core_select
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_init
</UL>

<P><STRONG><a name="[134]"></a>usbd_ep_init</STRONG> (Thumb, 272 bytes, Stack size 28 bytes, usbd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usbd_ep_init
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_init
</UL>

<P><STRONG><a name="[135]"></a>usbd_ep_deinit</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, usbd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usbd_ep_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_deinit
</UL>

<P><STRONG><a name="[13c]"></a>usbd_ep_rx</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, usbd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_ep_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_out_transaction
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_in_transaction
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctlstatus_rx
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctlrx
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_data_receive
</UL>

<P><STRONG><a name="[136]"></a>usbd_ep_tx</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, usbd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_fifo_write
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_in_transaction
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctlstatus_tx
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctltx
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_data_send
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_data_handler
</UL>

<P><STRONG><a name="[13a]"></a>usbd_ctltx</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, usbd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = usbd_ctltx &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_getconfig
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_getdescriptor
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_req_handler
</UL>

<P><STRONG><a name="[139]"></a>usbd_ctlrx</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usbd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usbd_ctlrx &rArr; usbd_ep_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_req_handler
</UL>

<P><STRONG><a name="[15f]"></a>usbd_ctlstatus_tx</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = usbd_ctlstatus_tx &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ep0_startout
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setconfig
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setaddress
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setfeature
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_clrfeature
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_device_class_request
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_out_transaction
</UL>

<P><STRONG><a name="[161]"></a>usbd_ctlstatus_rx</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbd_ctlstatus_rx &rArr; usbd_ep_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ep0_startout
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_in_transaction
</UL>

<P><STRONG><a name="[174]"></a>usbd_ep_stall</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, usbd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usbd_ep_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setfeature
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_clrfeature
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_transaction
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
</UL>

<P><STRONG><a name="[179]"></a>usbd_ep_clear_stall</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, usbd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_ep_clear_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_clrfeature
</UL>

<P><STRONG><a name="[162]"></a>usbd_ep_fifo_flush</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbd_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rxfifo_flush
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_txfifo_flush
</UL>

<P><STRONG><a name="[138]"></a>usbd_rxcount_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_data_handler
</UL>

<P><STRONG><a name="[127]"></a>usbd_isr</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, usbd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = usbd_isr &rArr; usbd_intf_outep &rArr; usbd_setup_transaction &rArr; usbd_device_class_request &rArr; usbd_ctlstatus_tx &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_outep
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_inep
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_earlysuspend
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_suspend
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_resume
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_sof
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_rxfifo
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_reset
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_enumfinish
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_isoinincomplete
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_isooutincomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFS_IRQHandler
</UL>

<P><STRONG><a name="[13b]"></a>usbd_enum_error</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbd_std.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usbd_enum_error &rArr; usbd_ep_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_stall
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ep0_startout
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setconfig
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_getconfig
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_getdescriptor
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setaddress
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setfeature
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_clrfeature
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_device_class_request
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_req_handler
</UL>

<P><STRONG><a name="[16d]"></a>usbd_setup_transaction</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usbd_std.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = usbd_setup_transaction &rArr; usbd_device_class_request &rArr; usbd_ctlstatus_tx &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_request_parse
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_standard_request
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_device_class_request
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_vendor_request
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_outep
</UL>

<P><STRONG><a name="[16c]"></a>usbd_out_transaction</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, usbd_std.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = usbd_out_transaction &rArr; usbd_ctlstatus_tx &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctlstatus_tx
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_outep
</UL>

<P><STRONG><a name="[16a]"></a>usbd_in_transaction</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, usbd_std.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = usbd_in_transaction &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctlstatus_rx
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_tx
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_inep
</UL>

<P><STRONG><a name="[182]"></a>SetFormatInfoPattern</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, qr_encode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetFormatInfoPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatModule
</UL>

<P><STRONG><a name="[181]"></a>SetMaskingPattern</STRONG> (Thumb, 406 bytes, Stack size 20 bytes, qr_encode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetMaskingPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatModule
</UL>

<P><STRONG><a name="[183]"></a>CountPenalty</STRONG> (Thumb, 1340 bytes, Stack size 24 bytes, qr_encode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CountPenalty
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatModule
</UL>

<P><STRONG><a name="[180]"></a>SetCodeWordPattern</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, qr_encode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetCodeWordPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatModule
</UL>

<P><STRONG><a name="[17d]"></a>SetAlignmentPattern</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, qr_encode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetAlignmentPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFunctionModule
</UL>

<P><STRONG><a name="[17c]"></a>SetVersionPattern</STRONG> (Thumb, 140 bytes, Stack size 12 bytes, qr_encode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetVersionPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFunctionModule
</UL>

<P><STRONG><a name="[17b]"></a>SetFinderPattern</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, qr_encode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetFinderPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFunctionModule
</UL>

<P><STRONG><a name="[17a]"></a>SetFunctionModule</STRONG> (Thumb, 440 bytes, Stack size 12 bytes, qr_encode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SetFunctionModule &rArr; SetFinderPattern
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFinderPattern
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVersionPattern
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlignmentPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatModule
</UL>

<P><STRONG><a name="[17e]"></a>FormatModule</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, qr_encode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = FormatModule &rArr; SetFunctionModule &rArr; SetFinderPattern
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFunctionModule
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCodeWordPattern
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountPenalty
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMaskingPattern
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFormatInfoPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeData
</UL>

<P><STRONG><a name="[18e]"></a>GetRSCodeWord</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, qr_encode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetRSCodeWord
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeData
</UL>

<P><STRONG><a name="[189]"></a>SetBitStream</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, qr_encode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetBitStream
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeData
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeSourceData
</UL>

<P><STRONG><a name="[18b]"></a>KanjiToBinaly</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, qr_encode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeSourceData
</UL>

<P><STRONG><a name="[18a]"></a>AlphabetToBinaly</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, qr_encode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeSourceData
</UL>

<P><STRONG><a name="[188]"></a>GetBitLength</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, qr_encode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetBitLength
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeSourceData
</UL>

<P><STRONG><a name="[187]"></a>IsAlphabetData</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, qr_encode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeSourceData
</UL>

<P><STRONG><a name="[186]"></a>IsNumeralData</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, qr_encode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeSourceData
</UL>

<P><STRONG><a name="[185]"></a>IsKanjiData</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, qr_encode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeSourceData
</UL>

<P><STRONG><a name="[184]"></a>EncodeSourceData</STRONG> (Thumb, 2010 bytes, Stack size 72 bytes, qr_encode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = EncodeSourceData &rArr; GetBitLength
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKanjiData
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNumeralData
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAlphabetData
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBitLength
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlphabetToBinaly
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KanjiToBinaly
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitStream
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEncodeVersion
</UL>

<P><STRONG><a name="[18c]"></a>GetEncodeVersion</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, qr_encode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = GetEncodeVersion &rArr; EncodeSourceData &rArr; GetBitLength
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeSourceData
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeData
</UL>

<P><STRONG><a name="[11d]"></a>EncodeData</STRONG> (Thumb, 844 bytes, Stack size 88 bytes, qr_encode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = EncodeData &rArr; GetEncodeVersion &rArr; EncodeSourceData &rArr; GetBitLength
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEncodeVersion
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitStream
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRSCodeWord
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatModule
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Code_url
</UL>

<P><STRONG><a name="[280]"></a>IsChineseData</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, qr_encode.o(.text), UNUSED)

<P><STRONG><a name="[281]"></a>ChineseToBinaly</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, qr_encode.o(.text), UNUSED)

<P><STRONG><a name="[282]"></a>Print_2DCode</STRONG> (Thumb, 518 bytes, Stack size 292 bytes, qr_encode.o(.text), UNUSED)

<P><STRONG><a name="[283]"></a>____aeabi_memcpy8$ret$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[284]"></a>___aeabi_memmove4$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[285]"></a>___aeabi_memmove8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>__aeabi_memcpy</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conect_HTTPS
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPS_check
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPS_para
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_check
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSQ_check
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_allo
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPS_cfg
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trade_state
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_order
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Code_url
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_HTTPS
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_Tx
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_regulate
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_days_num_by_date
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_calendar
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPS_check
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPS_para
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPS_cfg
</UL>

<P><STRONG><a name="[18d]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeData
</UL>

<P><STRONG><a name="[286]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[287]"></a>memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[288]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[289]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeData
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeSourceData
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatModule
</UL>

<P><STRONG><a name="[120]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trade_state
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_order
</UL>

<P><STRONG><a name="[28a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[11b]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conect_HTTPS
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPS_check
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPS_para
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_check
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_allo
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPS_cfg
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trade_state
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_order
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Code_url
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_HTTPS
</UL>

<P><STRONG><a name="[115]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_StrCenter
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeData
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_order
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_HTTPS
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_xml1
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_xml
</UL>

<P><STRONG><a name="[123]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trade_state
</UL>

<P><STRONG><a name="[28b]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[191]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[28c]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[198]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[199]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[19a]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[19b]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[19c]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1a3]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[65]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[28d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[28e]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[28f]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[290]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[196]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[291]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[292]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[293]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[b3]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_process
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_Rx
</UL>

<P><STRONG><a name="[294]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[295]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1a0]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[296]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[113]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_order
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_HTTPS
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_xml1
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_xml
</UL>

<P><STRONG><a name="[297]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[298]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1a1]"></a>__0vprintf</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[299]"></a>__1vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[29a]"></a>__2vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[29b]"></a>__c89vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[d9]"></a>vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Printf
</UL>

<P><STRONG><a name="[29c]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[29d]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[29e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[67]"></a>system_clock_120m_hxtal</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, system_gd32e10x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[66]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32e10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_120m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[8a]"></a>PrintfLogo</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PrintfLogo &rArr; Debug_Printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[ed]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitTimer
</UL>

<P><STRONG><a name="[f1]"></a>bsp_SoftTimerDec</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bsp_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ISR
</UL>

<P><STRONG><a name="[ee]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetRunTime
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_StopTimer
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_StartAutoTimer
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_StartTimer
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
</UL>

<P><STRONG><a name="[12b]"></a>_swap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd_gui.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_Triangel
</UL>

<P><STRONG><a name="[157]"></a>usb_commonint_enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_devint_enable
</UL>

<P><STRONG><a name="[155]"></a>usb_core_reset</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usb_core_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_core_init
</UL>

<P><STRONG><a name="[156]"></a>usb_devint_enable</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usb_devint_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_commonint_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_devcore_init
</UL>

<P><STRONG><a name="[173]"></a>usbd_intf_isooutincomplete</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[172]"></a>usbd_intf_isoinincomplete</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[171]"></a>usbd_intf_enumfinish</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, usbd_int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[163]"></a>usbd_intf_reset</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, usbd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbd_intf_reset &rArr; usb_txfifo_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ep0_startout
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_txfifo_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[164]"></a>usbd_intf_rxfifo</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, usbd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = usbd_intf_rxfifo &rArr; usb_fifo_read
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_fifo_read
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[170]"></a>usbd_intf_sof</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_intf_sof
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[16f]"></a>usbd_intf_resume</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbd_int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[166]"></a>usbd_intf_suspend</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, usbd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_intf_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_to_deepsleepmode
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[16e]"></a>usbd_intf_earlysuspend</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbd_int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[168]"></a>usbd_emptytxfifo_write</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, usbd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = usbd_emptytxfifo_write &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_fifo_write
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_inep
</UL>

<P><STRONG><a name="[169]"></a>usbd_intf_inep</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, usbd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = usbd_intf_inep &rArr; usbd_in_transaction &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_in_transaction
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_emptytxfifo_write
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[16b]"></a>usbd_intf_outep</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, usbd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = usbd_intf_outep &rArr; usbd_setup_transaction &rArr; usbd_device_class_request &rArr; usbd_ctlstatus_tx &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_transaction
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_out_transaction
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[178]"></a>usbd_vendor_request</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_std.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_transaction
</UL>

<P><STRONG><a name="[175]"></a>usbd_device_class_request</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbd_std.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = usbd_device_class_request &rArr; usbd_ctlstatus_tx &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctlstatus_tx
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_transaction
</UL>

<P><STRONG><a name="[177]"></a>usbd_standard_request</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbd_std.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_standard_request
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_transaction
</UL>

<P><STRONG><a name="[176]"></a>usbd_setup_request_parse</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usbd_std.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_setup_request_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_transaction
</UL>

<P><STRONG><a name="[8]"></a>usbd_reserved</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_std.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>usbd_device_descriptor_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_std.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>usbd_configuration_descriptor_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_std.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>usbd_string_descriptor_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_std.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_string_descriptor_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>usbd_getstatus</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_std.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>usbd_clrfeature</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, usbd_std.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = usbd_clrfeature &rArr; usbd_ctlstatus_tx &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_clear_stall
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_stall
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctlstatus_tx
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>usbd_setfeature</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, usbd_std.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = usbd_setfeature &rArr; usbd_ctlstatus_tx &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_stall
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctlstatus_tx
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>usbd_setaddress</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usbd_std.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = usbd_setaddress &rArr; usbd_ctlstatus_tx &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctlstatus_tx
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>usbd_getdescriptor</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, usbd_std.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = usbd_getdescriptor &rArr; usbd_ctltx &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctltx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>usbd_setdescriptor</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_std.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>usbd_getconfig</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, usbd_std.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = usbd_getconfig &rArr; usbd_ctltx &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctltx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>usbd_setconfig</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, usbd_std.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = usbd_setconfig &rArr; usbd_ctlstatus_tx &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctlstatus_tx
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>usbd_getinterface</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_std.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_getinterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>usbd_setinterface</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_std.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_setinterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>usbd_synchframe</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_std.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[1a2]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[19f]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vprintf
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[1a5]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1a4]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[63]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
